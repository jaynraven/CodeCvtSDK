list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
include(project)

# 指定Unicode字符集
add_definitions(-DUNICODE -D_UNICODE)

# ---------------------------------------------------------------------------- #
# Define global variables 定义变量
# ---------------------------------------------------------------------------- #

# 设置目标架构
set(TARGET_ARCH ${CMAKE_SYSTEM_PROCESSOR})
if(WIN32)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8) 
        set(TARGET_ARCH x64)
        set(INSTALL_ARCH x64)
    else()
        set(TARGET_ARCH x86)
        set(INSTALL_ARCH x86)
    endif()
elseif(APPLE)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(TARGET_ARCH x86_64)
        set(INSTALL_ARCH x64)
    endif()
    set(CMAKE_OSX_ARCHITECTURES ${TARGET_ARCH})
elseif(UNIX)
    if(CMAKE_SIZEOF_VOID_P EQUAL 8) 
        set(TARGET_ARCH x64)
        set(INSTALL_ARCH x64)
    else()
        set(TARGET_ARCH x86)
        set(INSTALL_ARCH x86)
    endif()
endif()

# 设置目标名称
set(EXAMPLE_TARGET_NAME example)

# ---------------------------------------------------------------------------- #
# Project add runnable target 添加可执行目标
# ---------------------------------------------------------------------------- #

unset(example_code_files)
file(GLOB_RECURSE example_code_files ${EXAMPLE_DIR}/*.cpp)

# 对源码进行分组
source_group(src/ FILES ${example_code_files})

# 添加可执行目标
add_executable(${EXAMPLE_TARGET_NAME})
target_sources(${EXAMPLE_TARGET_NAME}
    PRIVATE
    ${example_code_files}
)
target_include_directories(${EXAMPLE_TARGET_NAME}
    PRIVATE
    ${EXAMPLE_DIR}
    ${INTERFACE_DIR}
)

# 链接库
target_link_libraries(${EXAMPLE_TARGET_NAME}
    PUBLIC
    ${TARGET_NAME}
)